main主线程：nanosleep(&ts, NULL)让出CPU，超时时间2秒唤醒，不断在EventLoop()函数里进行RTSP通信:主要是检查是否有新连接，对所有连接
进行RTSP协议对接。
	EventLoop：查询是否有新连接，有就将新连接加入链表并初始化其会话表。并ScheduleConnections里调用RtspServer函数
	同时如果有连接断开就做些清理连接和会话的工作
		RtspServer：select休眠，有RTSP数据或超时100ms唤醒.有RTSP包时，读取接收到的包和客户端IP地址，并将这些内容保存到rtsp结构体里
		然后调用RTSP_handler针对rtsp的内容进行解析。
			RTSP_handler：先判断方法类型(类似于读报文的类别)，然后根据状态机结合RTSP协议进行通信：
			RTSP_options--RTSP_describe--RTSP_setup--RTSP_play--RTSP_teardown注意RTSP_setup时会建立RTSP会话，并建立RTP套接字RtpCreate
			并将RTP会话添加进schedule中，设置播放动作为RtpSend
			RTSP_play里调用schedule_start将g_s32DoPlay变成非0，以便schedule_do线程启动发送数据
	

schedule_do线程:nanosleep(&ts, NULL)让出CPU，超时时间33333纳秒=33微秒到重新获得CPU。获得CPU时，在stop_schedule=0的情况下，循环
ringgetringget(&ringinfo)来取得3518里的H264数据然后用sched[i].play_action=RtpSend函数发送出去

SAMPLE_VENC_1080P_CLASSIC线程：sleep(1)让出CPU，但超时唤醒又循环sleep(1)，基本上可以不考虑这个线程。H264编码前的准备工作，然后
创建线程SAMPLE_COMM_VENC_GetVencStreamProc。

SAMPLE_COMM_VENC_GetVencStreamProc线程：select休眠，有数据或超时唤醒。3518进行H264编码并将编码数据存到ringinfo里。
		
全局变量：sched[]
g_s32Quit：平时为0，按ctrl+c时为1，3518视频编码结束，即main主线程结束
stop_schedule：平时为0，按ctrl+c时为1，当所有连接关闭时stop_schedule也为1。即schedule_do线程结束
num_conn:初值为2，新增连接就加1，少一个连接就减1


------暂未弄明白 SendNalu264 
------暂未弄明白 HisiPutH264DataToBuffer 函数		查看http://blog.csdn.net/mo4776/article/details/78391969
													http://blog.csdn.net/DaveBobo/article/details/52994596
	里面有个UpdateSps(ringfifo[iput].buffer+off,9)函数，只编码9个字节，并不是一个H264片的长度，这长度为9与H264片长度
	无关，这里编码是为了发送SPS信息过去，取个名字而已，VLC那边定了9个字节，所以这边也要弄9个字节，在session1.log里有一
	行打印为psp.base64sps=0X2Lt7/k0PXC，这里的“0X2Lt7/k0PXC”就是对SPS编码得到的，另一个psp.base64pps=whMx9P==里的“whMx9P==”
	就是UpdatePps(ringfifo[iput].buffer+off,4)函数编码得到的
	 一个rtp包携带了一帧数据(single)如对nalu的sps,pps进行打包
	 多个rtp包携带了一帧数据(FU-A)如对视频帧数据进行打包
	 
pRtpFixedHdr：RTP头结构体

RTP包=RTP头(版本，时间戳等12字节)+NAL/FU-A
常用FU-A，这里只分析FU-A。
	FU-A=FU-A指示器(1byte)+FU-A头(1byte)+负荷
		FU-A指示器：低5位为28表示是FU-A，其余三位一般为0
		FU-A头=bit7(Start第一个FU-A包)+bit6(End最后一个FU-A包)+bit5(Reserve)+bit4-bit0(H264第0个00参与计算)
			查资料感觉FA-U头低5位表示这个FA-U包的类型，应该与真正的H264的NALU的类型一致，即应该是
			00 00 00 01 67的第4个字节67参与计算
		负荷:H264数据，第一个FU-A包的负荷为00 00 01 xx xx......,只有两个00表示H264开头，因为第0个00参与了FU-A头计算，
			所以感觉RTP的H264负荷比真正的H264负荷的开头码少了一个00
分析RTP:
截取一个数据，从0x2a处开始分析
