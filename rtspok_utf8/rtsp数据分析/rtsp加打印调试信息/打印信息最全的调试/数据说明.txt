从13133包开始分析数据，前面的数据是第一次调试时抓到的包，第一次调试数据没意义，真正对我们有用的数据从第13133包
开始，第二次调试播放从13133包开始，但中间还还有些TCP协议，我用的是NFS挂载根文件系统还有NFS协议，数据很多，所以
我们要过滤数据，在上面的应用显示过滤器输入rtsp然后回车，定位到13133包，发现第一个H264包是14633包，我们双击14633
包，弹出包信息框，上面是解释，下面是数据，点击上面的解释区，就可以知道数据代表什么意义，如第0x0e-0x21数据代表了
TCP协议版本是4，头长度20字节等等，当然我们的重点在RTP包，点击Real-Time Transport Protocol发现这些数据从0x2a开始
一直到结束，但我们并未发现H264的关键帧(0x67,0x68,0x65).为什么，这是因为客户端请求RTSP播放时，HI3518编码不太可能刚
好在编码关键帧，这时HI3518产生的帧很可能是非关键帧，所以找不到(0x67,0x68,0x65)这样的数据，当然，客户端VLC也播放不
了视频，所以最开始会有几百毫秒的黑屏。直到HI3518产生关键帧，客户端播放器接收到关键帧才开始显示视频，对应的包就是第
14689包。双击14689包，单击Real-Time Transport Protocol我看到的数据如下图，这些数据结合程序才对我们理解H264封装成
RTP包有作用。

RTP包=RTP头(版本，时间戳等12字节)+NAL/FU-A
常用FU-A，这里只分析FU-A。
	FU-A=FU-A指示器(1byte)+FU-A头(1byte)+负荷
		FU-A指示器：低5位为28表示是FU-A，其余三位一般为0
		FU-A头=bit7(Start第一个FU-A包)+bit6(End最后一个FU-A包)+bit5(Reserve)+bit4-bit0(H264第0个00参与计算)
			查资料感觉FA-U头低5位表示这个FA-U包的类型，应该与真正的H264的NALU的类型一致，即应该是
			00 00 00 01 67的第4个字节67参与计算
		负荷:H264数据，第一个FU-A包的负荷为00 00 01 xx xx......,只有两个00表示H264开头，因为第0个00参与了FU-A头计算，
			所以感觉RTP的H264负荷比真正的H264负荷的开头码少了一个00
在SendNalu264函数中hRtp->pRtpFixedHdr->u2Version   = 2;看RTP固定头结构可以知道RTP固定头第0字节最高两位
就是版本号2,其它6位为0，组合起来就是0x80,所以14689包第0x2a字节为0x80。第1字节低7位是负荷类型，程序里hRtp->pRtpFixedHdr->u7Payload   = H264;
最高位未填充，所以是0，组合起来就是0x60,就是14689包的第0x2b字节，固定头的第2，3字节就是包序列号，不同RTP包，这个值不
同，程序里用如下代码填充hRtp->pRtpFixedHdr->u16SeqNum   = htons(hRtp->u16SeqNum ++);对应14689包的第0x2c,0x2d字节(00 37)
同理，后面还要填充时间戳，ssrc等东西，对应代码为hRtp->pRtpFixedHdr->u32TimeStamp = htonl(hRtp->u32TimeStampCurr * (90000 / 1000));
hRtp->pRtpFixedHdr->u32SSrc     = hRtp->u32SSrc;对应的14689包的第0x2e-0x35字节,这样，RTP包固定头就占了12字节。具体后面的
将H264打包成FU-A包，程序里每一句代码都有注释，读者可自己结合注释代码与数据分析。

即我们开始抓到了数据，14689包--193096行
即我们开始抓到了数据，14689包--193096行